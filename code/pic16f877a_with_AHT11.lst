CCS PCM C Compiler, Version 5.015, 5967               31-May-25 11:53

               Filename:   C:\Users\Göktuð\Desktop\github\pic16f877a_with_AHT11.lst

               ROM used:   2256 words (28%)
                           Largest free fragment is 2048
               RAM used:   15 (4%) at main() level
                           57 (15%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  07
0001:  MOVWF  0A
0002:  GOTO   752
0003:  NOP
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA 8C,20
0005:  DATA 48,2A
0006:  DATA 31,18
0007:  DATA 20,21
0008:  DATA E1,39
0009:  DATA EC,30
000A:  DATA F4,34
000B:  DATA EC,34
000C:  DATA F9,37
000D:  DATA 72,00
000E:  DATA 0C,00
000F:  DATA D3,34
0010:  DATA E3,30
0011:  DATA 6B,36
0012:  DATA E9,35
0013:  DATA 3A,10
0014:  DATA 25,19
0015:  DATA AE,18
0016:  DATA 66,10
0017:  DATA 43,00
0018:  DATA CE,32
0019:  DATA 6D,1D
001A:  DATA A0,12
001B:  DATA 32,17
001C:  DATA 31,33
001D:  DATA A0,12
001E:  DATA 25,00
001F:  DATA 8C,29
0020:  DATA 65,37
0021:  DATA F3,37
0022:  DATA 72,10
0023:  DATA C8,30
0024:  DATA F4,30
0025:  DATA F3,34
0026:  DATA 00,00
*
01B0:  MOVF   0B,W
01B1:  MOVWF  29
01B2:  BCF    0B.7
01B3:  BSF    03.5
01B4:  BSF    03.6
01B5:  BSF    0C.7
01B6:  BSF    0C.0
01B7:  NOP
01B8:  NOP
01B9:  BCF    03.5
01BA:  BCF    03.6
01BB:  BTFSC  29.7
01BC:  BSF    0B.7
01BD:  BSF    03.6
01BE:  MOVF   0C,W
01BF:  ANDLW  7F
01C0:  BTFSC  03.2
01C1:  GOTO   204
01C2:  BCF    03.6
01C3:  MOVWF  29
01C4:  BSF    03.6
01C5:  MOVF   0D,W
01C6:  BCF    03.6
01C7:  MOVWF  2A
01C8:  BSF    03.6
01C9:  MOVF   0F,W
01CA:  BCF    03.6
01CB:  MOVWF  2B
01CC:  MOVF   29,W
01CD:  MOVWF  36
01CE:  CALL   184
01CF:  MOVF   2A,W
01D0:  BSF    03.6
01D1:  MOVWF  0D
01D2:  BCF    03.6
01D3:  MOVF   2B,W
01D4:  BSF    03.6
01D5:  MOVWF  0F
01D6:  BCF    03.6
01D7:  MOVF   0B,W
01D8:  MOVWF  2C
01D9:  BCF    0B.7
01DA:  BSF    03.5
01DB:  BSF    03.6
01DC:  BSF    0C.7
01DD:  BSF    0C.0
01DE:  NOP
01DF:  NOP
01E0:  BCF    03.5
01E1:  BCF    03.6
01E2:  BTFSC  2C.7
01E3:  BSF    0B.7
01E4:  BSF    03.6
01E5:  RLF    0C,W
01E6:  RLF    0E,W
01E7:  ANDLW  7F
01E8:  BTFSC  03.2
01E9:  GOTO   204
01EA:  BCF    03.6
01EB:  MOVWF  29
01EC:  BSF    03.6
01ED:  MOVF   0D,W
01EE:  BCF    03.6
01EF:  MOVWF  2A
01F0:  BSF    03.6
01F1:  MOVF   0F,W
01F2:  BCF    03.6
01F3:  MOVWF  2B
01F4:  MOVF   29,W
01F5:  MOVWF  36
01F6:  CALL   184
01F7:  MOVF   2A,W
01F8:  BSF    03.6
01F9:  MOVWF  0D
01FA:  BCF    03.6
01FB:  MOVF   2B,W
01FC:  BSF    03.6
01FD:  MOVWF  0F
01FE:  INCF   0D,F
01FF:  BTFSC  03.2
0200:  INCF   0F,F
0201:  BCF    03.6
0202:  GOTO   1B0
0203:  BSF    03.6
0204:  BCF    03.6
0205:  RETURN
*
0291:  MOVLW  B6
0292:  MOVWF  77
0293:  CLRF   7A
0294:  CLRF   79
0295:  CLRF   78
0296:  MOVF   3E,W
0297:  IORWF  3F,W
0298:  IORWF  40,W
0299:  IORWF  41,W
029A:  BTFSS  03.2
029B:  GOTO   29E
029C:  CLRF   77
029D:  GOTO   2AB
029E:  BCF    03.0
029F:  BTFSC  78.7
02A0:  GOTO   2AA
02A1:  RLF    3E,F
02A2:  RLF    3F,F
02A3:  RLF    40,F
02A4:  RLF    41,F
02A5:  RLF    7A,F
02A6:  RLF    79,F
02A7:  RLF    78,F
02A8:  DECFSZ 77,F
02A9:  GOTO   29E
02AA:  BCF    78.7
02AB:  RETURN
02AC:  MOVF   3E,W
02AD:  BTFSC  03.2
02AE:  GOTO   31C
02AF:  MOVWF  46
02B0:  MOVF   42,W
02B1:  BTFSC  03.2
02B2:  GOTO   31C
02B3:  ADDWF  46,F
02B4:  BTFSC  03.0
02B5:  GOTO   2BD
02B6:  MOVLW  7F
02B7:  SUBWF  46,F
02B8:  BTFSS  03.0
02B9:  GOTO   31C
02BA:  BTFSC  03.2
02BB:  GOTO   31C
02BC:  GOTO   2C1
02BD:  MOVLW  81
02BE:  ADDWF  46,F
02BF:  BTFSC  03.0
02C0:  GOTO   31C
02C1:  MOVF   46,W
02C2:  MOVWF  77
02C3:  CLRF   78
02C4:  CLRF   79
02C5:  CLRF   7A
02C6:  MOVF   3F,W
02C7:  MOVWF  4A
02C8:  BSF    4A.7
02C9:  MOVF   40,W
02CA:  MOVWF  49
02CB:  MOVF   41,W
02CC:  MOVWF  48
02CD:  MOVLW  18
02CE:  MOVWF  46
02CF:  CLRF   47
02D0:  BTFSS  48.0
02D1:  GOTO   2EA
02D2:  MOVF   45,W
02D3:  ADDWF  7A,F
02D4:  BTFSS  03.0
02D5:  GOTO   2DC
02D6:  INCF   79,F
02D7:  BTFSS  03.2
02D8:  GOTO   2DC
02D9:  INCF   78,F
02DA:  BTFSC  03.2
02DB:  BSF    47.7
02DC:  MOVF   44,W
02DD:  ADDWF  79,F
02DE:  BTFSS  03.0
02DF:  GOTO   2E3
02E0:  INCF   78,F
02E1:  BTFSC  03.2
02E2:  BSF    47.7
02E3:  MOVF   43,W
02E4:  MOVWF  40
02E5:  BSF    40.7
02E6:  MOVF   40,W
02E7:  ADDWF  78,F
02E8:  BTFSC  03.0
02E9:  BSF    47.7
02EA:  RLF    47,F
02EB:  RRF    78,F
02EC:  RRF    79,F
02ED:  RRF    7A,F
02EE:  RRF    4A,F
02EF:  RRF    49,F
02F0:  RRF    48,F
02F1:  BCF    03.0
02F2:  DECFSZ 46,F
02F3:  GOTO   2CF
02F4:  MOVLW  01
02F5:  ADDWF  77,F
02F6:  BTFSC  03.0
02F7:  GOTO   31C
02F8:  BTFSC  78.7
02F9:  GOTO   301
02FA:  RLF    4A,F
02FB:  RLF    7A,F
02FC:  RLF    79,F
02FD:  RLF    78,F
02FE:  DECF   77,F
02FF:  BTFSC  03.2
0300:  GOTO   31C
0301:  BTFSS  4A.7
0302:  GOTO   312
0303:  INCF   7A,F
0304:  BTFSS  03.2
0305:  GOTO   312
0306:  INCF   79,F
0307:  BTFSS  03.2
0308:  GOTO   312
0309:  INCF   78,F
030A:  BTFSS  03.2
030B:  GOTO   312
030C:  RRF    78,F
030D:  RRF    79,F
030E:  RRF    7A,F
030F:  INCF   77,F
0310:  BTFSC  03.2
0311:  GOTO   31C
0312:  MOVF   3F,W
0313:  MOVWF  47
0314:  MOVF   43,W
0315:  XORWF  47,F
0316:  BTFSS  47.7
0317:  GOTO   31A
0318:  BSF    78.7
0319:  GOTO   320
031A:  BCF    78.7
031B:  GOTO   320
031C:  CLRF   77
031D:  CLRF   78
031E:  CLRF   79
031F:  CLRF   7A
0320:  RETURN
0321:  MOVF   42,W
0322:  BTFSC  03.2
0323:  GOTO   3E6
0324:  MOVWF  4E
0325:  MOVF   46,W
0326:  BTFSC  03.2
0327:  GOTO   3E6
0328:  SUBWF  4E,F
0329:  BTFSS  03.0
032A:  GOTO   330
032B:  MOVLW  7F
032C:  ADDWF  4E,F
032D:  BTFSC  03.0
032E:  GOTO   3E6
032F:  GOTO   336
0330:  MOVLW  81
0331:  SUBWF  4E,F
0332:  BTFSS  03.0
0333:  GOTO   3E6
0334:  BTFSC  03.2
0335:  GOTO   3E6
0336:  MOVF   4E,W
0337:  MOVWF  77
0338:  CLRF   78
0339:  CLRF   79
033A:  CLRF   7A
033B:  CLRF   4D
033C:  MOVF   43,W
033D:  MOVWF  4C
033E:  BSF    4C.7
033F:  MOVF   44,W
0340:  MOVWF  4B
0341:  MOVF   45,W
0342:  MOVWF  4A
0343:  MOVLW  19
0344:  MOVWF  4E
0345:  MOVF   49,W
0346:  SUBWF  4A,F
0347:  BTFSC  03.0
0348:  GOTO   359
0349:  MOVLW  01
034A:  SUBWF  4B,F
034B:  BTFSC  03.0
034C:  GOTO   359
034D:  SUBWF  4C,F
034E:  BTFSC  03.0
034F:  GOTO   359
0350:  SUBWF  4D,F
0351:  BTFSC  03.0
0352:  GOTO   359
0353:  INCF   4D,F
0354:  INCF   4C,F
0355:  INCF   4B,F
0356:  MOVF   49,W
0357:  ADDWF  4A,F
0358:  GOTO   38B
0359:  MOVF   48,W
035A:  SUBWF  4B,F
035B:  BTFSC  03.0
035C:  GOTO   374
035D:  MOVLW  01
035E:  SUBWF  4C,F
035F:  BTFSC  03.0
0360:  GOTO   374
0361:  SUBWF  4D,F
0362:  BTFSC  03.0
0363:  GOTO   374
0364:  INCF   4D,F
0365:  INCF   4C,F
0366:  MOVF   48,W
0367:  ADDWF  4B,F
0368:  MOVF   49,W
0369:  ADDWF  4A,F
036A:  BTFSS  03.0
036B:  GOTO   38B
036C:  INCF   4B,F
036D:  BTFSS  03.2
036E:  GOTO   38B
036F:  INCF   4C,F
0370:  BTFSS  03.2
0371:  GOTO   38B
0372:  INCF   4D,F
0373:  GOTO   38B
0374:  MOVF   47,W
0375:  IORLW  80
0376:  SUBWF  4C,F
0377:  BTFSC  03.0
0378:  GOTO   38A
0379:  MOVLW  01
037A:  SUBWF  4D,F
037B:  BTFSC  03.0
037C:  GOTO   38A
037D:  INCF   4D,F
037E:  MOVF   47,W
037F:  IORLW  80
0380:  ADDWF  4C,F
0381:  MOVF   48,W
0382:  ADDWF  4B,F
0383:  BTFSS  03.0
0384:  GOTO   368
0385:  INCF   4C,F
0386:  BTFSS  03.2
0387:  GOTO   368
0388:  INCF   4D,F
0389:  GOTO   368
038A:  BSF    7A.0
038B:  DECFSZ 4E,F
038C:  GOTO   38E
038D:  GOTO   399
038E:  BCF    03.0
038F:  RLF    4A,F
0390:  RLF    4B,F
0391:  RLF    4C,F
0392:  RLF    4D,F
0393:  BCF    03.0
0394:  RLF    7A,F
0395:  RLF    79,F
0396:  RLF    78,F
0397:  RLF    4F,F
0398:  GOTO   345
0399:  BTFSS  4F.0
039A:  GOTO   3A1
039B:  BCF    03.0
039C:  RRF    78,F
039D:  RRF    79,F
039E:  RRF    7A,F
039F:  RRF    4F,F
03A0:  GOTO   3A4
03A1:  DECF   77,F
03A2:  BTFSC  03.2
03A3:  GOTO   3E6
03A4:  BTFSC  4F.7
03A5:  GOTO   3CD
03A6:  BCF    03.0
03A7:  RLF    4A,F
03A8:  RLF    4B,F
03A9:  RLF    4C,F
03AA:  RLF    4D,F
03AB:  MOVF   49,W
03AC:  SUBWF  4A,F
03AD:  BTFSC  03.0
03AE:  GOTO   3B9
03AF:  MOVLW  01
03B0:  SUBWF  4B,F
03B1:  BTFSC  03.0
03B2:  GOTO   3B9
03B3:  SUBWF  4C,F
03B4:  BTFSC  03.0
03B5:  GOTO   3B9
03B6:  SUBWF  4D,F
03B7:  BTFSS  03.0
03B8:  GOTO   3DC
03B9:  MOVF   48,W
03BA:  SUBWF  4B,F
03BB:  BTFSC  03.0
03BC:  GOTO   3C4
03BD:  MOVLW  01
03BE:  SUBWF  4C,F
03BF:  BTFSC  03.0
03C0:  GOTO   3C4
03C1:  SUBWF  4D,F
03C2:  BTFSS  03.0
03C3:  GOTO   3DC
03C4:  MOVF   47,W
03C5:  IORLW  80
03C6:  SUBWF  4C,F
03C7:  BTFSC  03.0
03C8:  GOTO   3CD
03C9:  MOVLW  01
03CA:  SUBWF  4D,F
03CB:  BTFSS  03.0
03CC:  GOTO   3DC
03CD:  INCF   7A,F
03CE:  BTFSS  03.2
03CF:  GOTO   3DC
03D0:  INCF   79,F
03D1:  BTFSS  03.2
03D2:  GOTO   3DC
03D3:  INCF   78,F
03D4:  BTFSS  03.2
03D5:  GOTO   3DC
03D6:  INCF   77,F
03D7:  BTFSC  03.2
03D8:  GOTO   3E6
03D9:  RRF    78,F
03DA:  RRF    79,F
03DB:  RRF    7A,F
03DC:  MOVF   43,W
03DD:  MOVWF  4E
03DE:  MOVF   47,W
03DF:  XORWF  4E,F
03E0:  BTFSS  4E.7
03E1:  GOTO   3E4
03E2:  BSF    78.7
03E3:  GOTO   3EA
03E4:  BCF    78.7
03E5:  GOTO   3EA
03E6:  CLRF   77
03E7:  CLRF   78
03E8:  CLRF   79
03E9:  CLRF   7A
03EA:  RETURN
*
0557:  MOVLW  80
0558:  BTFSC  03.1
0559:  XORWF  49,F
055A:  CLRF   4E
055B:  CLRF   4F
055C:  MOVF   45,W
055D:  MOVWF  4D
055E:  MOVF   49,W
055F:  XORWF  4D,F
0560:  MOVF   44,W
0561:  BTFSC  03.2
0562:  GOTO   647
0563:  MOVWF  4C
0564:  MOVWF  77
0565:  MOVF   48,W
0566:  BTFSC  03.2
0567:  GOTO   650
0568:  SUBWF  4C,F
0569:  BTFSC  03.2
056A:  GOTO   5EC
056B:  BTFSS  03.0
056C:  GOTO   5AA
056D:  MOVF   49,W
056E:  MOVWF  52
056F:  BSF    52.7
0570:  MOVF   4A,W
0571:  MOVWF  51
0572:  MOVF   4B,W
0573:  MOVWF  50
0574:  CLRF   4F
0575:  BCF    03.0
0576:  RRF    52,F
0577:  RRF    51,F
0578:  RRF    50,F
0579:  RRF    4F,F
057A:  DECFSZ 4C,F
057B:  GOTO   574
057C:  BTFSS  4D.7
057D:  GOTO   581
057E:  BSF    4E.0
057F:  GOTO   664
0580:  BCF    4E.0
0581:  BCF    4C.0
0582:  BSF    4E.4
0583:  MOVLW  47
0584:  MOVWF  04
0585:  BCF    03.7
0586:  GOTO   679
0587:  BCF    4E.4
0588:  BTFSC  4D.7
0589:  GOTO   594
058A:  BTFSS  4C.0
058B:  GOTO   59F
058C:  RRF    52,F
058D:  RRF    51,F
058E:  RRF    50,F
058F:  RRF    4F,F
0590:  INCF   77,F
0591:  BTFSC  03.2
0592:  GOTO   65F
0593:  GOTO   59F
0594:  BTFSC  52.7
0595:  GOTO   5A2
0596:  BCF    03.0
0597:  RLF    4F,F
0598:  RLF    50,F
0599:  RLF    51,F
059A:  RLF    52,F
059B:  DECF   77,F
059C:  BTFSC  03.2
059D:  GOTO   65F
059E:  GOTO   594
059F:  BSF    4E.6
05A0:  GOTO   60C
05A1:  BCF    4E.6
05A2:  MOVF   45,W
05A3:  MOVWF  4D
05A4:  BTFSS  4D.7
05A5:  GOTO   5A8
05A6:  BSF    52.7
05A7:  GOTO   658
05A8:  BCF    52.7
05A9:  GOTO   658
05AA:  MOVF   48,W
05AB:  MOVWF  4C
05AC:  MOVWF  77
05AD:  MOVF   44,W
05AE:  SUBWF  4C,F
05AF:  MOVF   45,W
05B0:  MOVWF  52
05B1:  BSF    52.7
05B2:  MOVF   46,W
05B3:  MOVWF  51
05B4:  MOVF   47,W
05B5:  MOVWF  50
05B6:  CLRF   4F
05B7:  BCF    03.0
05B8:  RRF    52,F
05B9:  RRF    51,F
05BA:  RRF    50,F
05BB:  RRF    4F,F
05BC:  DECFSZ 4C,F
05BD:  GOTO   5B6
05BE:  BTFSS  4D.7
05BF:  GOTO   5C3
05C0:  BSF    4E.1
05C1:  GOTO   664
05C2:  BCF    4E.1
05C3:  BCF    4C.0
05C4:  BSF    4E.5
05C5:  MOVLW  4B
05C6:  MOVWF  04
05C7:  BCF    03.7
05C8:  GOTO   679
05C9:  BCF    4E.5
05CA:  BTFSC  4D.7
05CB:  GOTO   5D6
05CC:  BTFSS  4C.0
05CD:  GOTO   5E1
05CE:  RRF    52,F
05CF:  RRF    51,F
05D0:  RRF    50,F
05D1:  RRF    4F,F
05D2:  INCF   77,F
05D3:  BTFSC  03.2
05D4:  GOTO   65F
05D5:  GOTO   5E1
05D6:  BTFSC  52.7
05D7:  GOTO   5E4
05D8:  BCF    03.0
05D9:  RLF    4F,F
05DA:  RLF    50,F
05DB:  RLF    51,F
05DC:  RLF    52,F
05DD:  DECF   77,F
05DE:  BTFSC  03.2
05DF:  GOTO   65F
05E0:  GOTO   5D6
05E1:  BSF    4E.7
05E2:  GOTO   60C
05E3:  BCF    4E.7
05E4:  MOVF   49,W
05E5:  MOVWF  4D
05E6:  BTFSS  4D.7
05E7:  GOTO   5EA
05E8:  BSF    52.7
05E9:  GOTO   658
05EA:  BCF    52.7
05EB:  GOTO   658
05EC:  MOVF   49,W
05ED:  MOVWF  52
05EE:  BSF    52.7
05EF:  MOVF   4A,W
05F0:  MOVWF  51
05F1:  MOVF   4B,W
05F2:  MOVWF  50
05F3:  BTFSS  4D.7
05F4:  GOTO   5F9
05F5:  BCF    52.7
05F6:  BSF    4E.2
05F7:  GOTO   664
05F8:  BCF    4E.2
05F9:  CLRF   4F
05FA:  BCF    4C.0
05FB:  MOVLW  47
05FC:  MOVWF  04
05FD:  BCF    03.7
05FE:  GOTO   679
05FF:  BTFSC  4D.7
0600:  GOTO   622
0601:  MOVF   45,W
0602:  MOVWF  4D
0603:  BTFSS  4C.0
0604:  GOTO   60C
0605:  RRF    52,F
0606:  RRF    51,F
0607:  RRF    50,F
0608:  RRF    4F,F
0609:  INCF   77,F
060A:  BTFSC  03.2
060B:  GOTO   65F
060C:  BTFSS  4F.7
060D:  GOTO   61D
060E:  INCF   50,F
060F:  BTFSS  03.2
0610:  GOTO   61D
0611:  INCF   51,F
0612:  BTFSS  03.2
0613:  GOTO   61D
0614:  INCF   52,F
0615:  BTFSS  03.2
0616:  GOTO   61D
0617:  RRF    52,F
0618:  RRF    51,F
0619:  RRF    50,F
061A:  INCF   77,F
061B:  BTFSC  03.2
061C:  GOTO   65F
061D:  BTFSC  4E.6
061E:  GOTO   5A1
061F:  BTFSC  4E.7
0620:  GOTO   5E3
0621:  GOTO   641
0622:  MOVLW  80
0623:  XORWF  52,F
0624:  BTFSS  52.7
0625:  GOTO   62A
0626:  GOTO   664
0627:  MOVF   49,W
0628:  MOVWF  4D
0629:  GOTO   637
062A:  MOVF   45,W
062B:  MOVWF  4D
062C:  MOVF   52,F
062D:  BTFSS  03.2
062E:  GOTO   637
062F:  MOVF   51,F
0630:  BTFSS  03.2
0631:  GOTO   637
0632:  MOVF   50,F
0633:  BTFSS  03.2
0634:  GOTO   637
0635:  CLRF   77
0636:  GOTO   658
0637:  BTFSC  52.7
0638:  GOTO   641
0639:  BCF    03.0
063A:  RLF    4F,F
063B:  RLF    50,F
063C:  RLF    51,F
063D:  RLF    52,F
063E:  DECFSZ 77,F
063F:  GOTO   637
0640:  GOTO   65F
0641:  BTFSS  4D.7
0642:  GOTO   645
0643:  BSF    52.7
0644:  GOTO   658
0645:  BCF    52.7
0646:  GOTO   658
0647:  MOVF   48,W
0648:  MOVWF  77
0649:  MOVF   49,W
064A:  MOVWF  52
064B:  MOVF   4A,W
064C:  MOVWF  51
064D:  MOVF   4B,W
064E:  MOVWF  50
064F:  GOTO   658
0650:  MOVF   44,W
0651:  MOVWF  77
0652:  MOVF   45,W
0653:  MOVWF  52
0654:  MOVF   46,W
0655:  MOVWF  51
0656:  MOVF   47,W
0657:  MOVWF  50
0658:  MOVF   52,W
0659:  MOVWF  78
065A:  MOVF   51,W
065B:  MOVWF  79
065C:  MOVF   50,W
065D:  MOVWF  7A
065E:  GOTO   697
065F:  CLRF   77
0660:  CLRF   78
0661:  CLRF   79
0662:  CLRF   7A
0663:  GOTO   697
0664:  CLRF   4F
0665:  COMF   50,F
0666:  COMF   51,F
0667:  COMF   52,F
0668:  COMF   4F,F
0669:  INCF   4F,F
066A:  BTFSS  03.2
066B:  GOTO   672
066C:  INCF   50,F
066D:  BTFSS  03.2
066E:  GOTO   672
066F:  INCF   51,F
0670:  BTFSC  03.2
0671:  INCF   52,F
0672:  BTFSC  4E.0
0673:  GOTO   580
0674:  BTFSC  4E.1
0675:  GOTO   5C2
0676:  BTFSC  4E.2
0677:  GOTO   5F8
0678:  GOTO   627
0679:  MOVF   00,W
067A:  ADDWF  50,F
067B:  BTFSS  03.0
067C:  GOTO   683
067D:  INCF   51,F
067E:  BTFSS  03.2
067F:  GOTO   683
0680:  INCF   52,F
0681:  BTFSC  03.2
0682:  BSF    4C.0
0683:  DECF   04,F
0684:  MOVF   00,W
0685:  ADDWF  51,F
0686:  BTFSS  03.0
0687:  GOTO   68B
0688:  INCF   52,F
0689:  BTFSC  03.2
068A:  BSF    4C.0
068B:  DECF   04,F
068C:  MOVF   00,W
068D:  BTFSS  00.7
068E:  XORLW  80
068F:  ADDWF  52,F
0690:  BTFSC  03.0
0691:  BSF    4C.0
0692:  BTFSC  4E.4
0693:  GOTO   587
0694:  BTFSC  4E.5
0695:  GOTO   5C9
0696:  GOTO   5FF
*
06AC:  MOVF   0B,W
06AD:  MOVWF  2A
06AE:  BCF    0B.7
06AF:  BSF    03.5
06B0:  BSF    03.6
06B1:  BSF    0C.7
06B2:  BSF    0C.0
06B3:  NOP
06B4:  NOP
06B5:  BCF    03.5
06B6:  BCF    03.6
06B7:  BTFSC  2A.7
06B8:  BSF    0B.7
06B9:  BTFSC  03.0
06BA:  GOTO   6E3
06BB:  BSF    03.6
06BC:  MOVF   0C,W
06BD:  ANDLW  7F
06BE:  BCF    03.6
06BF:  MOVWF  2A
06C0:  BSF    03.6
06C1:  MOVF   0D,W
06C2:  BCF    03.6
06C3:  MOVWF  2B
06C4:  BSF    03.6
06C5:  MOVF   0F,W
06C6:  BCF    03.6
06C7:  MOVWF  2C
06C8:  MOVF   2A,W
06C9:  MOVWF  36
06CA:  CALL   184
06CB:  MOVF   2B,W
06CC:  BSF    03.6
06CD:  MOVWF  0D
06CE:  BCF    03.6
06CF:  MOVF   2C,W
06D0:  BSF    03.6
06D1:  MOVWF  0F
06D2:  BCF    03.6
06D3:  MOVF   0B,W
06D4:  MOVWF  2D
06D5:  BCF    0B.7
06D6:  BSF    03.5
06D7:  BSF    03.6
06D8:  BSF    0C.7
06D9:  BSF    0C.0
06DA:  NOP
06DB:  NOP
06DC:  BCF    03.5
06DD:  BCF    03.6
06DE:  BTFSC  2D.7
06DF:  BSF    0B.7
06E0:  DECFSZ 29,F
06E1:  GOTO   6E3
06E2:  GOTO   702
06E3:  BSF    03.6
06E4:  RLF    0C,W
06E5:  RLF    0E,W
06E6:  ANDLW  7F
06E7:  BCF    03.6
06E8:  MOVWF  2A
06E9:  BSF    03.6
06EA:  MOVF   0D,W
06EB:  BCF    03.6
06EC:  MOVWF  2B
06ED:  BSF    03.6
06EE:  MOVF   0F,W
06EF:  BCF    03.6
06F0:  MOVWF  2C
06F1:  MOVF   2A,W
06F2:  MOVWF  36
06F3:  CALL   184
06F4:  MOVF   2B,W
06F5:  BSF    03.6
06F6:  MOVWF  0D
06F7:  BCF    03.6
06F8:  MOVF   2C,W
06F9:  BSF    03.6
06FA:  MOVWF  0F
06FB:  INCF   0D,F
06FC:  BTFSC  03.2
06FD:  INCF   0F,F
06FE:  BCF    03.0
06FF:  BCF    03.6
0700:  DECFSZ 29,F
0701:  GOTO   6AC
0702:  RETURN
0703:  BTFSC  03.1
0704:  GOTO   708
0705:  MOVLW  3E
0706:  MOVWF  04
0707:  BCF    03.7
0708:  CLRF   77
0709:  CLRF   78
070A:  CLRF   79
070B:  CLRF   7A
070C:  CLRF   3E
070D:  CLRF   3F
070E:  CLRF   40
070F:  CLRF   41
0710:  MOVF   3D,W
0711:  IORWF  3C,W
0712:  IORWF  3B,W
0713:  IORWF  3A,W
0714:  BTFSC  03.2
0715:  GOTO   746
0716:  MOVLW  20
0717:  MOVWF  42
0718:  BCF    03.0
0719:  RLF    36,F
071A:  RLF    37,F
071B:  RLF    38,F
071C:  RLF    39,F
071D:  RLF    3E,F
071E:  RLF    3F,F
071F:  RLF    40,F
0720:  RLF    41,F
0721:  MOVF   3D,W
0722:  SUBWF  41,W
0723:  BTFSS  03.2
0724:  GOTO   72F
0725:  MOVF   3C,W
0726:  SUBWF  40,W
0727:  BTFSS  03.2
0728:  GOTO   72F
0729:  MOVF   3B,W
072A:  SUBWF  3F,W
072B:  BTFSS  03.2
072C:  GOTO   72F
072D:  MOVF   3A,W
072E:  SUBWF  3E,W
072F:  BTFSS  03.0
0730:  GOTO   740
0731:  MOVF   3A,W
0732:  SUBWF  3E,F
0733:  MOVF   3B,W
0734:  BTFSS  03.0
0735:  INCFSZ 3B,W
0736:  SUBWF  3F,F
0737:  MOVF   3C,W
0738:  BTFSS  03.0
0739:  INCFSZ 3C,W
073A:  SUBWF  40,F
073B:  MOVF   3D,W
073C:  BTFSS  03.0
073D:  INCFSZ 3D,W
073E:  SUBWF  41,F
073F:  BSF    03.0
0740:  RLF    77,F
0741:  RLF    78,F
0742:  RLF    79,F
0743:  RLF    7A,F
0744:  DECFSZ 42,F
0745:  GOTO   718
0746:  MOVF   3E,W
0747:  MOVWF  00
0748:  INCF   04,F
0749:  MOVF   3F,W
074A:  MOVWF  00
074B:  INCF   04,F
074C:  MOVF   40,W
074D:  MOVWF  00
074E:  INCF   04,F
074F:  MOVF   41,W
0750:  MOVWF  00
0751:  RETURN
*
0800:  MOVF   04,W
0801:  MOVWF  2E
0802:  MOVF   2D,W
0803:  MOVWF  30
0804:  BTFSC  03.2
0805:  GOTO   021
0806:  MOVF   2C,W
0807:  MOVWF  41
0808:  MOVF   2B,W
0809:  MOVWF  40
080A:  MOVF   2A,W
080B:  MOVWF  3F
080C:  MOVF   29,W
080D:  MOVWF  3E
080E:  CLRF   45
080F:  CLRF   44
0810:  MOVLW  20
0811:  MOVWF  43
0812:  MOVLW  82
0813:  MOVWF  42
0814:  BCF    0A.3
0815:  CALL   2AC
0816:  BSF    0A.3
0817:  MOVF   7A,W
0818:  MOVWF  2C
0819:  MOVF   79,W
081A:  MOVWF  2B
081B:  MOVF   78,W
081C:  MOVWF  2A
081D:  MOVF   77,W
081E:  MOVWF  29
081F:  DECFSZ 30,F
0820:  GOTO   006
0821:  MOVF   2C,W
0822:  MOVWF  39
0823:  MOVF   2B,W
0824:  MOVWF  38
0825:  MOVF   2A,W
0826:  MOVWF  37
0827:  MOVF   29,W
0828:  MOVWF  36
0829:  MOVF   36,W
082A:  SUBLW  B6
082B:  MOVWF  36
082C:  CLRF   7A
082D:  MOVF   37,W
082E:  MOVWF  3A
082F:  BSF    37.7
0830:  BCF    03.0
0831:  RRF    37,F
0832:  RRF    38,F
0833:  RRF    39,F
0834:  RRF    7A,F
0835:  RRF    79,F
0836:  RRF    78,F
0837:  RRF    77,F
0838:  DECFSZ 36,F
0839:  GOTO   030
083A:  BTFSS  3A.7
083B:  GOTO   047
083C:  COMF   77,F
083D:  COMF   78,F
083E:  COMF   79,F
083F:  COMF   7A,F
0840:  INCF   77,F
0841:  BTFSC  03.2
0842:  INCF   78,F
0843:  BTFSC  03.2
0844:  INCF   79,F
0845:  BTFSC  03.2
0846:  INCF   7A,F
0847:  MOVF   7A,W
0848:  MOVWF  2C
0849:  MOVF   79,W
084A:  MOVWF  2B
084B:  MOVF   78,W
084C:  MOVWF  2A
084D:  MOVF   77,W
084E:  MOVWF  29
084F:  BTFSS  2C.7
0850:  GOTO   05E
0851:  DECF   2E,F
0852:  BSF    2E.5
0853:  COMF   29,F
0854:  COMF   2A,F
0855:  COMF   2B,F
0856:  COMF   2C,F
0857:  INCF   29,F
0858:  BTFSC  03.2
0859:  INCF   2A,F
085A:  BTFSC  03.2
085B:  INCF   2B,F
085C:  BTFSC  03.2
085D:  INCF   2C,F
085E:  MOVLW  3B
085F:  MOVWF  35
0860:  MOVLW  9A
0861:  MOVWF  34
0862:  MOVLW  CA
0863:  MOVWF  33
0864:  CLRF   32
0865:  MOVLW  0A
0866:  MOVWF  30
0867:  MOVF   2D,W
0868:  BTFSC  03.2
0869:  INCF   2E,F
086A:  BSF    03.1
086B:  MOVLW  29
086C:  MOVWF  04
086D:  BCF    03.7
086E:  MOVF   2C,W
086F:  MOVWF  39
0870:  MOVF   2B,W
0871:  MOVWF  38
0872:  MOVF   2A,W
0873:  MOVWF  37
0874:  MOVF   29,W
0875:  MOVWF  36
0876:  MOVF   35,W
0877:  MOVWF  3D
0878:  MOVF   34,W
0879:  MOVWF  3C
087A:  MOVF   33,W
087B:  MOVWF  3B
087C:  MOVF   32,W
087D:  MOVWF  3A
087E:  BCF    0A.3
087F:  CALL   703
0880:  BSF    0A.3
0881:  MOVF   78,W
0882:  MOVF   77,F
0883:  BTFSS  03.2
0884:  GOTO   098
0885:  INCF   2D,W
0886:  SUBWF  30,W
0887:  BTFSC  03.2
0888:  GOTO   098
0889:  MOVF   2E,W
088A:  BTFSC  03.2
088B:  GOTO   09A
088C:  ANDLW  0F
088D:  SUBWF  30,W
088E:  BTFSC  03.2
088F:  GOTO   092
0890:  BTFSC  03.0
0891:  GOTO   0D2
0892:  BTFSC  2E.7
0893:  GOTO   0D2
0894:  BTFSC  2E.6
0895:  GOTO   09A
0896:  MOVLW  20
0897:  GOTO   0CC
0898:  MOVLW  20
0899:  ANDWF  2E,F
089A:  BTFSS  2E.5
089B:  GOTO   0AA
089C:  BCF    2E.5
089D:  MOVF   2D,W
089E:  BTFSS  03.2
089F:  DECF   2E,F
08A0:  MOVF   77,W
08A1:  MOVWF  2E
08A2:  MOVLW  2D
08A3:  MOVWF  36
08A4:  BCF    0A.3
08A5:  CALL   184
08A6:  BSF    0A.3
08A7:  MOVF   2E,W
08A8:  MOVWF  77
08A9:  CLRF   2E
08AA:  MOVF   2D,W
08AB:  SUBWF  30,W
08AC:  BTFSS  03.2
08AD:  GOTO   0BA
08AE:  MOVF   77,W
08AF:  MOVWF  2E
08B0:  MOVLW  2E
08B1:  MOVWF  36
08B2:  BCF    0A.3
08B3:  CALL   184
08B4:  BSF    0A.3
08B5:  MOVF   2E,W
08B6:  MOVWF  77
08B7:  MOVLW  20
08B8:  ANDWF  2E,F
08B9:  MOVLW  00
08BA:  MOVLW  30
08BB:  BTFSS  2E.5
08BC:  GOTO   0CC
08BD:  BCF    2E.5
08BE:  MOVF   2D,W
08BF:  BTFSS  03.2
08C0:  DECF   2E,F
08C1:  MOVF   77,W
08C2:  MOVWF  2E
08C3:  MOVLW  2D
08C4:  MOVWF  36
08C5:  BCF    0A.3
08C6:  CALL   184
08C7:  BSF    0A.3
08C8:  MOVF   2E,W
08C9:  MOVWF  77
08CA:  CLRF   2E
08CB:  MOVLW  30
08CC:  ADDWF  77,F
08CD:  MOVF   77,W
08CE:  MOVWF  36
08CF:  BCF    0A.3
08D0:  CALL   184
08D1:  BSF    0A.3
08D2:  BCF    03.1
08D3:  MOVF   35,W
08D4:  MOVWF  39
08D5:  MOVF   34,W
08D6:  MOVWF  38
08D7:  MOVF   33,W
08D8:  MOVWF  37
08D9:  MOVF   32,W
08DA:  MOVWF  36
08DB:  CLRF   3D
08DC:  CLRF   3C
08DD:  CLRF   3B
08DE:  MOVLW  0A
08DF:  MOVWF  3A
08E0:  BCF    0A.3
08E1:  CALL   703
08E2:  BSF    0A.3
08E3:  MOVF   7A,W
08E4:  MOVWF  35
08E5:  MOVF   79,W
08E6:  MOVWF  34
08E7:  MOVF   78,W
08E8:  MOVWF  33
08E9:  MOVF   77,W
08EA:  MOVWF  32
08EB:  DECFSZ 30,F
08EC:  GOTO   06A
08ED:  RETURN
....................  
.................... #list 
....................  
.................... #fuses HS, NOWDT, NOPUT, NOLVP 
.................... #use delay(clock=20000000) 
*
0027:  MOVLW  37
0028:  MOVWF  04
0029:  BCF    03.7
002A:  MOVF   00,W
002B:  BTFSC  03.2
002C:  GOTO   03A
002D:  MOVLW  06
002E:  MOVWF  78
002F:  CLRF   77
0030:  DECFSZ 77,F
0031:  GOTO   030
0032:  DECFSZ 78,F
0033:  GOTO   02F
0034:  MOVLW  7B
0035:  MOVWF  77
0036:  DECFSZ 77,F
0037:  GOTO   036
0038:  DECFSZ 00,F
0039:  GOTO   02D
003A:  RETURN
.................... #use i2c(master, SDA=PIN_B0, SCL=PIN_B1, FAST) 
*
0206:  MOVLW  08
0207:  MOVWF  78
0208:  NOP
0209:  BCF    06.1
020A:  BSF    03.5
020B:  BCF    06.1
020C:  NOP
020D:  BCF    03.5
020E:  RLF    3C,F
020F:  BCF    06.0
0210:  BTFSS  03.0
0211:  GOTO   215
0212:  BSF    03.5
0213:  BSF    06.0
0214:  BCF    03.5
0215:  BTFSC  03.0
0216:  GOTO   21A
0217:  BSF    03.5
0218:  BCF    06.0
0219:  BCF    03.5
021A:  BSF    03.5
021B:  BSF    06.1
021C:  BCF    03.5
021D:  BTFSS  06.1
021E:  GOTO   21D
021F:  DECFSZ 78,F
0220:  GOTO   208
0221:  NOP
0222:  BCF    06.1
0223:  BSF    03.5
0224:  BCF    06.1
0225:  NOP
0226:  BSF    06.0
0227:  NOP
0228:  NOP
0229:  BSF    06.1
022A:  BCF    03.5
022B:  BTFSS  06.1
022C:  GOTO   22B
022D:  CLRF   78
022E:  NOP
022F:  BTFSC  06.0
0230:  BSF    78.0
0231:  BCF    06.1
0232:  BSF    03.5
0233:  BCF    06.1
0234:  BCF    03.5
0235:  BCF    06.0
0236:  BSF    03.5
0237:  BCF    06.0
0238:  BCF    03.5
0239:  RETURN
*
0410:  MOVLW  08
0411:  MOVWF  40
0412:  MOVF   77,W
0413:  MOVWF  41
0414:  BSF    03.5
0415:  BSF    06.0
0416:  NOP
0417:  BSF    06.1
0418:  BCF    03.5
0419:  BTFSS  06.1
041A:  GOTO   419
041B:  BTFSC  06.0
041C:  BSF    03.0
041D:  BTFSS  06.0
041E:  BCF    03.0
041F:  RLF    78,F
0420:  NOP
0421:  BSF    03.5
0422:  BCF    06.1
0423:  BCF    03.5
0424:  BCF    06.1
0425:  DECFSZ 40,F
0426:  GOTO   414
0427:  BSF    03.5
0428:  BSF    06.0
0429:  NOP
042A:  BCF    03.5
042B:  BCF    06.0
042C:  MOVF   41,W
042D:  BTFSC  03.2
042E:  GOTO   432
042F:  BSF    03.5
0430:  BCF    06.0
0431:  BCF    03.5
0432:  NOP
0433:  BSF    03.5
0434:  BSF    06.1
0435:  BCF    03.5
0436:  BTFSS  06.1
0437:  GOTO   436
0438:  NOP
0439:  BCF    06.1
043A:  BSF    03.5
043B:  BCF    06.1
043C:  NOP
043D:  BCF    03.5
043E:  BCF    06.0
043F:  BSF    03.5
0440:  BCF    06.0
....................  
.................... #define LCD_ENABLE_PIN PIN_C2 
.................... #define LCD_RS_PIN     PIN_C0 
.................... #define LCD_RW_PIN     PIN_C1 
.................... #define LCD_DATA4      PIN_D4 
.................... #define LCD_DATA5      PIN_D5 
.................... #define LCD_DATA6      PIN_D6 
.................... #define LCD_DATA7      PIN_D7 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00B4:  BSF    08.4
....................    output_float(LCD_DATA5); 
00B5:  BSF    08.5
....................    output_float(LCD_DATA6); 
00B6:  BSF    08.6
....................    output_float(LCD_DATA7); 
00B7:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00B8:  BCF    03.5
00B9:  BSF    07.1
00BA:  BCF    20.1
00BB:  MOVF   20,W
00BC:  BSF    03.5
00BD:  MOVWF  07
....................    delay_cycles(1); 
00BE:  NOP
....................    lcd_output_enable(1); 
00BF:  BCF    03.5
00C0:  BSF    07.2
00C1:  BCF    20.2
00C2:  MOVF   20,W
00C3:  BSF    03.5
00C4:  MOVWF  07
....................    delay_cycles(1); 
00C5:  NOP
....................    high = lcd_read_nibble(); 
00C6:  BCF    03.5
00C7:  CALL   06F
00C8:  MOVF   78,W
00C9:  MOVWF  3E
....................        
....................    lcd_output_enable(0); 
00CA:  BCF    07.2
00CB:  BCF    20.2
00CC:  MOVF   20,W
00CD:  BSF    03.5
00CE:  MOVWF  07
....................    delay_cycles(1); 
00CF:  NOP
....................    lcd_output_enable(1); 
00D0:  BCF    03.5
00D1:  BSF    07.2
00D2:  BCF    20.2
00D3:  MOVF   20,W
00D4:  BSF    03.5
00D5:  MOVWF  07
....................    delay_us(1); 
00D6:  GOTO   0D7
00D7:  GOTO   0D8
00D8:  NOP
....................    low = lcd_read_nibble(); 
00D9:  BCF    03.5
00DA:  CALL   06F
00DB:  MOVF   78,W
00DC:  MOVWF  3D
....................        
....................    lcd_output_enable(0); 
00DD:  BCF    07.2
00DE:  BCF    20.2
00DF:  MOVF   20,W
00E0:  BSF    03.5
00E1:  MOVWF  07
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00E2:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00E3:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00E4:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00E5:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00E6:  BCF    03.5
00E7:  SWAPF  3E,W
00E8:  MOVWF  77
00E9:  MOVLW  F0
00EA:  ANDWF  77,F
00EB:  MOVF   77,W
00EC:  IORWF  3D,W
00ED:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
006F:  CLRF   3F
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0070:  BSF    03.5
0071:  BSF    08.4
0072:  MOVLW  00
0073:  BCF    03.5
0074:  BTFSC  08.4
0075:  MOVLW  01
0076:  IORWF  3F,F
....................    n |= input(LCD_DATA5) << 1; 
0077:  BSF    03.5
0078:  BSF    08.5
0079:  MOVLW  00
007A:  BCF    03.5
007B:  BTFSC  08.5
007C:  MOVLW  01
007D:  MOVWF  77
007E:  BCF    03.0
007F:  RLF    77,F
0080:  MOVF   77,W
0081:  IORWF  3F,F
....................    n |= input(LCD_DATA6) << 2; 
0082:  BSF    03.5
0083:  BSF    08.6
0084:  MOVLW  00
0085:  BCF    03.5
0086:  BTFSC  08.6
0087:  MOVLW  01
0088:  MOVWF  77
0089:  RLF    77,F
008A:  RLF    77,F
008B:  MOVLW  FC
008C:  ANDWF  77,F
008D:  MOVF   77,W
008E:  IORWF  3F,F
....................    n |= input(LCD_DATA7) << 3; 
008F:  BSF    03.5
0090:  BSF    08.7
0091:  MOVLW  00
0092:  BCF    03.5
0093:  BTFSC  08.7
0094:  MOVLW  01
0095:  MOVWF  77
0096:  RLF    77,F
0097:  RLF    77,F
0098:  RLF    77,F
0099:  MOVLW  F8
009A:  ANDWF  77,F
009B:  MOVF   77,W
009C:  IORWF  3F,F
....................     
....................    return(n); 
009D:  MOVF   3F,W
009E:  MOVWF  78
....................   #else 
009F:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
003B:  BTFSC  3E.0
003C:  GOTO   03F
003D:  BCF    08.4
003E:  GOTO   040
003F:  BSF    08.4
0040:  BSF    03.5
0041:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0042:  BCF    03.5
0043:  BTFSC  3E.1
0044:  GOTO   047
0045:  BCF    08.5
0046:  GOTO   048
0047:  BSF    08.5
0048:  BSF    03.5
0049:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
004A:  BCF    03.5
004B:  BTFSC  3E.2
004C:  GOTO   04F
004D:  BCF    08.6
004E:  GOTO   050
004F:  BSF    08.6
0050:  BSF    03.5
0051:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0052:  BCF    03.5
0053:  BTFSC  3E.3
0054:  GOTO   057
0055:  BCF    08.7
0056:  GOTO   058
0057:  BSF    08.7
0058:  BSF    03.5
0059:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
005A:  NOP
....................    lcd_output_enable(1); 
005B:  BCF    03.5
005C:  BSF    07.2
005D:  BCF    20.2
005E:  MOVF   20,W
005F:  BSF    03.5
0060:  MOVWF  07
....................    delay_us(2); 
0061:  MOVLW  02
0062:  MOVWF  77
0063:  DECFSZ 77,F
0064:  GOTO   063
0065:  GOTO   066
0066:  NOP
....................    lcd_output_enable(0); 
0067:  BCF    03.5
0068:  BCF    07.2
0069:  BCF    20.2
006A:  MOVF   20,W
006B:  BSF    03.5
006C:  MOVWF  07
006D:  BCF    03.5
006E:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00A0:  BCF    20.2
00A1:  MOVF   20,W
00A2:  BSF    03.5
00A3:  MOVWF  07
....................    lcd_rs_tris(); 
00A4:  BCF    03.5
00A5:  BCF    20.0
00A6:  MOVF   20,W
00A7:  BSF    03.5
00A8:  MOVWF  07
....................    lcd_rw_tris(); 
00A9:  BCF    03.5
00AA:  BCF    20.1
00AB:  MOVF   20,W
00AC:  BSF    03.5
00AD:  MOVWF  07
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00AE:  BCF    03.5
00AF:  BCF    07.0
00B0:  BCF    20.0
00B1:  MOVF   20,W
00B2:  BSF    03.5
00B3:  MOVWF  07
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00EE:  MOVF   78,W
00EF:  MOVWF  3D
00F0:  BTFSS  3D.7
00F1:  GOTO   0F4
00F2:  BSF    03.5
00F3:  GOTO   0B4
....................    lcd_output_rs(address); 
00F4:  MOVF   3B,F
00F5:  BTFSS  03.2
00F6:  GOTO   0F9
00F7:  BCF    07.0
00F8:  GOTO   0FA
00F9:  BSF    07.0
00FA:  BCF    20.0
00FB:  MOVF   20,W
00FC:  BSF    03.5
00FD:  MOVWF  07
....................    delay_cycles(1); 
00FE:  NOP
....................    lcd_output_rw(0); 
00FF:  BCF    03.5
0100:  BCF    07.1
0101:  BCF    20.1
0102:  MOVF   20,W
0103:  BSF    03.5
0104:  MOVWF  07
....................    delay_cycles(1); 
0105:  NOP
....................    lcd_output_enable(0); 
0106:  BCF    03.5
0107:  BCF    07.2
0108:  BCF    20.2
0109:  MOVF   20,W
010A:  BSF    03.5
010B:  MOVWF  07
....................    lcd_send_nibble(n >> 4); 
010C:  BCF    03.5
010D:  SWAPF  3C,W
010E:  MOVWF  3D
010F:  MOVLW  0F
0110:  ANDWF  3D,F
0111:  MOVF   3D,W
0112:  MOVWF  3E
0113:  CALL   03B
....................    lcd_send_nibble(n & 0xf); 
0114:  MOVF   3C,W
0115:  ANDLW  0F
0116:  MOVWF  3D
0117:  MOVWF  3E
0118:  CALL   03B
0119:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
011A:  MOVLW  28
011B:  MOVWF  2A
011C:  MOVLW  0C
011D:  MOVWF  2B
011E:  MOVLW  01
011F:  MOVWF  2C
0120:  MOVLW  06
0121:  MOVWF  2D
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0122:  BCF    07.2
0123:  BCF    20.2
0124:  MOVF   20,W
0125:  BSF    03.5
0126:  MOVWF  07
....................    lcd_output_rs(0); 
0127:  BCF    03.5
0128:  BCF    07.0
0129:  BCF    20.0
012A:  MOVF   20,W
012B:  BSF    03.5
012C:  MOVWF  07
....................    lcd_output_rw(0); 
012D:  BCF    03.5
012E:  BCF    07.1
012F:  BCF    20.1
0130:  MOVF   20,W
0131:  BSF    03.5
0132:  MOVWF  07
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0133:  BCF    08.4
....................    output_drive(LCD_DATA5); 
0134:  BCF    08.5
....................    output_drive(LCD_DATA6); 
0135:  BCF    08.6
....................    output_drive(LCD_DATA7); 
0136:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0137:  BCF    03.5
0138:  BCF    20.2
0139:  MOVF   20,W
013A:  BSF    03.5
013B:  MOVWF  07
....................    lcd_rs_tris(); 
013C:  BCF    03.5
013D:  BCF    20.0
013E:  MOVF   20,W
013F:  BSF    03.5
0140:  MOVWF  07
....................    lcd_rw_tris(); 
0141:  BCF    03.5
0142:  BCF    20.1
0143:  MOVF   20,W
0144:  BSF    03.5
0145:  MOVWF  07
....................  #endif 
....................      
....................    delay_ms(15); 
0146:  MOVLW  0F
0147:  BCF    03.5
0148:  MOVWF  37
0149:  CALL   027
....................    for(i=1;i<=3;++i) 
014A:  MOVLW  01
014B:  MOVWF  29
014C:  MOVF   29,W
014D:  SUBLW  03
014E:  BTFSS  03.0
014F:  GOTO   158
....................    { 
....................        lcd_send_nibble(3); 
0150:  MOVLW  03
0151:  MOVWF  3E
0152:  CALL   03B
....................        delay_ms(5); 
0153:  MOVLW  05
0154:  MOVWF  37
0155:  CALL   027
0156:  INCF   29,F
0157:  GOTO   14C
....................    } 
....................     
....................    lcd_send_nibble(2); 
0158:  MOVLW  02
0159:  MOVWF  3E
015A:  CALL   03B
....................    delay_ms(5); 
015B:  MOVLW  05
015C:  MOVWF  37
015D:  CALL   027
....................    for(i=0;i<=3;++i) 
015E:  CLRF   29
015F:  MOVF   29,W
0160:  SUBLW  03
0161:  BTFSS  03.0
0162:  GOTO   16F
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0163:  MOVLW  2A
0164:  ADDWF  29,W
0165:  MOVWF  04
0166:  BCF    03.7
0167:  MOVF   00,W
0168:  MOVWF  2E
0169:  CLRF   3B
016A:  MOVF   2E,W
016B:  MOVWF  3C
016C:  CALL   0A0
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
016D:  INCF   29,F
016E:  GOTO   15F
016F:  BCF    0A.3
0170:  BCF    0A.4
0171:  GOTO   769 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0172:  DECFSZ 38,W
0173:  GOTO   175
0174:  GOTO   178
....................       address=LCD_LINE_TWO; 
0175:  MOVLW  40
0176:  MOVWF  39
0177:  GOTO   179
....................    else 
....................       address=0; 
0178:  CLRF   39
....................       
....................    address+=x-1; 
0179:  MOVLW  01
017A:  SUBWF  37,W
017B:  ADDWF  39,F
....................    lcd_send_byte(0,0x80|address); 
017C:  MOVF   39,W
017D:  IORLW  80
017E:  MOVWF  3A
017F:  CLRF   3B
0180:  MOVF   3A,W
0181:  MOVWF  3C
0182:  CALL   0A0
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0183:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0184:  MOVF   36,W
0185:  XORLW  07
0186:  BTFSC  03.2
0187:  GOTO   192
0188:  XORLW  0B
0189:  BTFSC  03.2
018A:  GOTO   197
018B:  XORLW  06
018C:  BTFSC  03.2
018D:  GOTO   19F
018E:  XORLW  02
018F:  BTFSC  03.2
0190:  GOTO   1A5
0191:  GOTO   1AA
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0192:  MOVLW  01
0193:  MOVWF  37
0194:  MOVWF  38
0195:  CALL   172
0196:  GOTO   1AF
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0197:  CLRF   3B
0198:  MOVLW  01
0199:  MOVWF  3C
019A:  CALL   0A0
....................                      delay_ms(2); 
019B:  MOVLW  02
019C:  MOVWF  37
019D:  CALL   027
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
019E:  GOTO   1AF
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
019F:  MOVLW  01
01A0:  MOVWF  37
01A1:  MOVLW  02
01A2:  MOVWF  38
01A3:  CALL   172
01A4:  GOTO   1AF
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
01A5:  CLRF   3B
01A6:  MOVLW  10
01A7:  MOVWF  3C
01A8:  CALL   0A0
01A9:  GOTO   1AF
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
01AA:  MOVLW  01
01AB:  MOVWF  3B
01AC:  MOVF   36,W
01AD:  MOVWF  3C
01AE:  CALL   0A0
....................      #endif 
....................    } 
01AF:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... void aht10_init() { 
....................     i2c_start(); 
*
023A:  BSF    03.5
023B:  BSF    06.0
023C:  NOP
023D:  BSF    06.1
023E:  NOP
023F:  BCF    03.5
0240:  BCF    06.0
0241:  BSF    03.5
0242:  BCF    06.0
0243:  NOP
0244:  BCF    03.5
0245:  BCF    06.1
0246:  BSF    03.5
0247:  BCF    06.1
....................     i2c_write(0x70); // AHT11 adresi  bu adresi deðiþtirebilirsiniz bazý modeller 0x38 adresini kullanýr 
0248:  MOVLW  70
0249:  BCF    03.5
024A:  MOVWF  3C
024B:  CALL   206
....................     i2c_write(0xBE); // Soft reset komutu 
024C:  MOVLW  BE
024D:  MOVWF  3C
024E:  CALL   206
....................     i2c_stop(); 
024F:  BSF    03.5
0250:  BCF    06.0
0251:  NOP
0252:  BSF    06.1
0253:  BCF    03.5
0254:  BTFSS  06.1
0255:  GOTO   254
0256:  NOP
0257:  GOTO   258
0258:  NOP
0259:  BSF    03.5
025A:  BSF    06.0
025B:  NOP
....................     delay_ms(20);    // Sensör hazýr olana kadar bekle 
025C:  MOVLW  14
025D:  BCF    03.5
025E:  MOVWF  37
025F:  CALL   027
0260:  BCF    0A.3
0261:  BCF    0A.4
0262:  GOTO   778 (RETURN)
.................... } 
....................  
.................... void aht10_trigger_measurement() { 
....................     i2c_start(); 
0263:  BSF    03.5
0264:  BSF    06.0
0265:  NOP
0266:  BSF    06.1
0267:  NOP
0268:  BCF    03.5
0269:  BCF    06.0
026A:  BSF    03.5
026B:  BCF    06.0
026C:  NOP
026D:  BCF    03.5
026E:  BCF    06.1
026F:  BSF    03.5
0270:  BCF    06.1
....................     i2c_write(0x70); // AHT10 adresi yazma modu 
0271:  MOVLW  70
0272:  BCF    03.5
0273:  MOVWF  3C
0274:  CALL   206
....................     i2c_write(0xAC); // Trigger measurement 
0275:  MOVLW  AC
0276:  MOVWF  3C
0277:  CALL   206
....................     i2c_write(0x33); 
0278:  MOVLW  33
0279:  MOVWF  3C
027A:  CALL   206
....................     i2c_write(0x00); 
027B:  CLRF   3C
027C:  CALL   206
....................     i2c_stop(); 
027D:  BSF    03.5
027E:  BCF    06.0
027F:  NOP
0280:  BSF    06.1
0281:  BCF    03.5
0282:  BTFSS  06.1
0283:  GOTO   282
0284:  NOP
0285:  GOTO   286
0286:  NOP
0287:  BSF    03.5
0288:  BSF    06.0
0289:  NOP
....................     delay_ms(80); // Ölçüm tamamlanmasý için bekle 
028A:  MOVLW  50
028B:  BCF    03.5
028C:  MOVWF  37
028D:  CALL   027
028E:  BCF    0A.3
028F:  BCF    0A.4
0290:  GOTO   780 (RETURN)
.................... } 
....................  
.................... int1 aht10_read(float *sicaklik, float *nem) { 
....................     int8 data[6]; 
....................     int32 raw_temp, raw_hum; 
....................  
....................     i2c_start(); 
*
03EB:  BSF    03.5
03EC:  BSF    06.0
03ED:  NOP
03EE:  BSF    06.1
03EF:  NOP
03F0:  BCF    03.5
03F1:  BCF    06.0
03F2:  BSF    03.5
03F3:  BCF    06.0
03F4:  NOP
03F5:  BCF    03.5
03F6:  BCF    06.1
03F7:  BSF    03.5
03F8:  BCF    06.1
....................     i2c_write(0x71); // AHT10 adresi okuma modu 
03F9:  MOVLW  71
03FA:  BCF    03.5
03FB:  MOVWF  3C
03FC:  CALL   206
....................     for (int i = 0; i < 6; i++) { 
03FD:  CLRF   3B
03FE:  MOVF   3B,W
03FF:  SUBLW  05
0400:  BTFSS  03.0
0401:  GOTO   446
....................         data[i] = i2c_read(i < 5); // Son baytta NOACK 
0402:  MOVLW  2D
0403:  ADDWF  3B,W
0404:  MOVWF  04
0405:  BCF    03.7
0406:  MOVF   3B,W
0407:  SUBLW  04
0408:  BTFSC  03.0
0409:  GOTO   40C
040A:  MOVLW  00
040B:  GOTO   40D
040C:  MOVLW  01
040D:  MOVWF  3E
040E:  MOVF   3E,W
040F:  MOVWF  77
*
0441:  MOVF   78,W
0442:  MOVWF  00
0443:  BCF    03.5
0444:  INCF   3B,F
0445:  GOTO   3FE
....................     } 
....................     i2c_stop(); 
0446:  BSF    03.5
0447:  BCF    06.0
0448:  NOP
0449:  BSF    06.1
044A:  BCF    03.5
044B:  BTFSS  06.1
044C:  GOTO   44B
044D:  NOP
044E:  GOTO   44F
044F:  NOP
0450:  BSF    03.5
0451:  BSF    06.0
0452:  NOP
....................  
....................     // Ölçüm bitmiþ mi kontrol et 
....................     if ((data[0] & 0x80) == 0x80) 
0453:  BCF    03.5
0454:  MOVF   2D,W
0455:  ANDLW  80
0456:  SUBLW  80
0457:  BTFSS  03.2
0458:  GOTO   45C
....................         return 0; // Ölçüm devam ediyor, baþarýsýz 
0459:  MOVLW  00
045A:  MOVWF  78
045B:  GOTO   6A9
....................  
....................     raw_hum = ((int32)data[1] << 12) | ((int32)data[2] << 4) | (data[3] >> 4); 
045C:  CLRF   3F
045D:  CLRF   3E
045E:  CLRF   3D
045F:  MOVF   2E,W
0460:  MOVWF  3C
0461:  MOVF   3E,W
0462:  MOVWF  3F
0463:  MOVF   3D,W
0464:  MOVWF  3E
0465:  MOVF   2E,W
0466:  MOVWF  3D
0467:  CLRF   3C
0468:  RLF    3D,F
0469:  RLF    3E,F
046A:  RLF    3F,F
046B:  RLF    3D,F
046C:  RLF    3E,F
046D:  RLF    3F,F
046E:  RLF    3D,F
046F:  RLF    3E,F
0470:  RLF    3F,F
0471:  RLF    3D,F
0472:  RLF    3E,F
0473:  RLF    3F,F
0474:  MOVLW  F0
0475:  ANDWF  3D,F
0476:  CLRF   44
0477:  CLRF   43
0478:  CLRF   42
0479:  RLF    2F,W
047A:  MOVWF  77
047B:  RLF    42,W
047C:  MOVWF  78
047D:  RLF    43,W
047E:  MOVWF  79
047F:  RLF    44,W
0480:  MOVWF  7A
0481:  RLF    77,F
0482:  RLF    78,F
0483:  RLF    79,F
0484:  RLF    7A,F
0485:  RLF    77,F
0486:  RLF    78,F
0487:  RLF    79,F
0488:  RLF    7A,F
0489:  RLF    77,F
048A:  RLF    78,F
048B:  RLF    79,F
048C:  RLF    7A,F
048D:  MOVLW  F0
048E:  ANDWF  77,F
048F:  MOVF   77,W
0490:  IORWF  3C,F
0491:  MOVF   78,W
0492:  IORWF  3D,F
0493:  MOVF   79,W
0494:  IORWF  3E,F
0495:  MOVF   7A,W
0496:  IORWF  3F,F
0497:  SWAPF  30,W
0498:  MOVWF  77
0499:  MOVLW  0F
049A:  ANDWF  77,F
049B:  MOVF   77,W
049C:  IORWF  3C,W
049D:  MOVWF  37
049E:  MOVF   3D,W
049F:  MOVWF  38
04A0:  MOVF   3E,W
04A1:  MOVWF  39
04A2:  MOVF   3F,W
04A3:  MOVWF  3A
....................     raw_temp = (((int32)(data[3] & 0x0F)) << 16) | ((int32)(data[4]) << 8) | data[5]; 
04A4:  MOVF   30,W
04A5:  ANDLW  0F
04A6:  CLRF   3F
04A7:  CLRF   3E
04A8:  CLRF   3D
04A9:  MOVWF  3C
04AA:  MOVF   3D,W
04AB:  MOVWF  3F
04AC:  MOVF   3C,W
04AD:  MOVWF  3E
04AE:  CLRF   3C
04AF:  CLRF   3D
04B0:  CLRF   44
04B1:  CLRF   43
04B2:  CLRF   42
04B3:  CLRF   77
04B4:  MOVF   77,W
04B5:  IORWF  3C,F
04B6:  MOVF   31,W
04B7:  IORWF  3D,F
04B8:  MOVF   42,W
04B9:  IORWF  3E,F
04BA:  MOVF   43,W
04BB:  IORWF  3F,F
04BC:  MOVF   3C,W
04BD:  IORWF  32,W
04BE:  MOVWF  33
04BF:  MOVF   3D,W
04C0:  MOVWF  34
04C1:  MOVF   3E,W
04C2:  MOVWF  35
04C3:  MOVF   3F,W
04C4:  MOVWF  36
....................  
....................     *nem = (raw_hum * 100.0) / 1048576.0; 
04C5:  MOVF   2C,W
04C6:  MOVWF  7A
04C7:  MOVF   2B,W
04C8:  MOVWF  04
04C9:  BCF    03.7
04CA:  BTFSC  2C.0
04CB:  BSF    03.7
04CC:  MOVF   3A,W
04CD:  MOVWF  41
04CE:  MOVF   39,W
04CF:  MOVWF  40
04D0:  MOVF   38,W
04D1:  MOVWF  3F
04D2:  MOVF   37,W
04D3:  MOVWF  3E
04D4:  CALL   291
04D5:  MOVF   7A,W
04D6:  MOVWF  41
04D7:  MOVF   79,W
04D8:  MOVWF  40
04D9:  MOVF   78,W
04DA:  MOVWF  3F
04DB:  MOVF   77,W
04DC:  MOVWF  3E
04DD:  CLRF   45
04DE:  CLRF   44
04DF:  MOVLW  48
04E0:  MOVWF  43
04E1:  MOVLW  85
04E2:  MOVWF  42
04E3:  CALL   2AC
04E4:  MOVF   7A,W
04E5:  MOVWF  41
04E6:  MOVF   79,W
04E7:  MOVWF  40
04E8:  MOVF   78,W
04E9:  MOVWF  3F
04EA:  MOVF   77,W
04EB:  MOVWF  3E
04EC:  MOVF   7A,W
04ED:  MOVWF  45
04EE:  MOVF   79,W
04EF:  MOVWF  44
04F0:  MOVF   78,W
04F1:  MOVWF  43
04F2:  MOVF   77,W
04F3:  MOVWF  42
04F4:  CLRF   49
04F5:  CLRF   48
04F6:  CLRF   47
04F7:  MOVLW  93
04F8:  MOVWF  46
04F9:  CALL   321
04FA:  MOVF   77,W
04FB:  MOVWF  00
04FC:  INCF   04,F
04FD:  MOVF   78,W
04FE:  MOVWF  00
04FF:  INCF   04,F
0500:  MOVF   79,W
0501:  MOVWF  00
0502:  INCF   04,F
0503:  MOVF   7A,W
0504:  MOVWF  00
....................     *sicaklik = (raw_temp * 200.0 / 1048576.0) - 50.0; 
0505:  MOVF   2A,W
0506:  MOVWF  7A
0507:  MOVF   29,W
0508:  MOVWF  04
0509:  BCF    03.7
050A:  BTFSC  7A.0
050B:  BSF    03.7
050C:  MOVF   36,W
050D:  MOVWF  41
050E:  MOVF   35,W
050F:  MOVWF  40
0510:  MOVF   34,W
0511:  MOVWF  3F
0512:  MOVF   33,W
0513:  MOVWF  3E
0514:  CALL   291
0515:  MOVF   7A,W
0516:  MOVWF  41
0517:  MOVF   79,W
0518:  MOVWF  40
0519:  MOVF   78,W
051A:  MOVWF  3F
051B:  MOVF   77,W
051C:  MOVWF  3E
051D:  CLRF   45
051E:  CLRF   44
051F:  MOVLW  48
0520:  MOVWF  43
0521:  MOVLW  86
0522:  MOVWF  42
0523:  CALL   2AC
0524:  MOVF   7A,W
0525:  MOVWF  41
0526:  MOVF   79,W
0527:  MOVWF  40
0528:  MOVF   78,W
0529:  MOVWF  3F
052A:  MOVF   77,W
052B:  MOVWF  3E
052C:  MOVF   41,W
052D:  MOVWF  45
052E:  MOVF   40,W
052F:  MOVWF  44
0530:  MOVF   3F,W
0531:  MOVWF  43
0532:  MOVF   3E,W
0533:  MOVWF  42
0534:  CLRF   49
0535:  CLRF   48
0536:  CLRF   47
0537:  MOVLW  93
0538:  MOVWF  46
0539:  CALL   321
053A:  MOVF   7A,W
053B:  MOVWF  41
053C:  MOVF   79,W
053D:  MOVWF  40
053E:  MOVF   78,W
053F:  MOVWF  3F
0540:  MOVF   77,W
0541:  MOVWF  3E
0542:  CLRF   43
0543:  MOVF   04,W
0544:  MOVWF  42
0545:  BCF    43.0
0546:  BTFSC  03.7
0547:  BSF    43.0
0548:  BSF    03.1
0549:  MOVF   41,W
054A:  MOVWF  47
054B:  MOVF   40,W
054C:  MOVWF  46
054D:  MOVF   3F,W
054E:  MOVWF  45
054F:  MOVF   3E,W
0550:  MOVWF  44
0551:  CLRF   4B
0552:  CLRF   4A
0553:  MOVLW  48
0554:  MOVWF  49
0555:  MOVLW  84
0556:  MOVWF  48
*
0697:  MOVF   42,W
0698:  MOVWF  04
0699:  BCF    03.7
069A:  BTFSC  43.0
069B:  BSF    03.7
069C:  MOVF   77,W
069D:  MOVWF  00
069E:  INCF   04,F
069F:  MOVF   78,W
06A0:  MOVWF  00
06A1:  INCF   04,F
06A2:  MOVF   79,W
06A3:  MOVWF  00
06A4:  INCF   04,F
06A5:  MOVF   7A,W
06A6:  MOVWF  00
....................  
....................     return 1; // Baþarýlý 
06A7:  MOVLW  01
06A8:  MOVWF  78
06A9:  BCF    0A.3
06AA:  BCF    0A.4
06AB:  GOTO   787 (RETURN)
.................... } 
....................  
.................... void main() { 
*
0752:  MOVF   03,W
0753:  ANDLW  1F
0754:  MOVWF  03
0755:  MOVLW  FF
0756:  MOVWF  20
0757:  BSF    03.5
0758:  BSF    1F.0
0759:  BSF    1F.1
075A:  BSF    1F.2
075B:  BCF    1F.3
075C:  MOVLW  07
075D:  MOVWF  1C
075E:  BCF    03.7
075F:  BCF    03.5
0760:  CLRF   24
0761:  CLRF   23
0762:  CLRF   22
0763:  CLRF   21
0764:  CLRF   28
0765:  CLRF   27
0766:  CLRF   26
0767:  CLRF   25
....................     float sicaklik = 0.0, nem = 0.0; 
....................  
....................     lcd_init(); 
0768:  GOTO   11A
....................     lcd_putc("\fAHT10 Baslatiliyor"); 
0769:  MOVLW  04
076A:  BSF    03.6
076B:  MOVWF  0D
076C:  MOVLW  00
076D:  MOVWF  0F
076E:  BCF    03.6
076F:  CALL   1B0
....................     delay_ms(1000); 
0770:  MOVLW  04
0771:  MOVWF  29
0772:  MOVLW  FA
0773:  MOVWF  37
0774:  CALL   027
0775:  DECFSZ 29,F
0776:  GOTO   772
....................  
....................     aht10_init(); 
0777:  GOTO   23A
....................     lcd_putc("\f"); 
0778:  MOVLW  0E
0779:  BSF    03.6
077A:  MOVWF  0D
077B:  MOVLW  00
077C:  MOVWF  0F
077D:  BCF    03.6
077E:  CALL   1B0
....................  
....................     while (TRUE) { 
....................         aht10_trigger_measurement(); 
077F:  GOTO   263
....................         if (aht10_read(&sicaklik, &nem)) { 
0780:  CLRF   2A
0781:  MOVLW  21
0782:  MOVWF  29
0783:  CLRF   2C
0784:  MOVLW  25
0785:  MOVWF  2B
0786:  GOTO   3EB
0787:  MOVF   78,F
0788:  BTFSC  03.2
0789:  GOTO   7D2
....................             lcd_gotoxy(1,1); 
078A:  MOVLW  01
078B:  MOVWF  37
078C:  MOVWF  38
078D:  CALL   172
....................             printf(lcd_putc, "Sicaklik: %2.1f C", sicaklik); 
078E:  MOVLW  0F
078F:  BSF    03.6
0790:  MOVWF  0D
0791:  MOVLW  00
0792:  MOVWF  0F
0793:  BCF    03.0
0794:  MOVLW  0A
0795:  BCF    03.6
0796:  MOVWF  29
0797:  CALL   6AC
0798:  MOVLW  01
0799:  MOVWF  04
079A:  MOVF   24,W
079B:  MOVWF  2C
079C:  MOVF   23,W
079D:  MOVWF  2B
079E:  MOVF   22,W
079F:  MOVWF  2A
07A0:  MOVF   21,W
07A1:  MOVWF  29
07A2:  MOVLW  01
07A3:  MOVWF  2D
07A4:  BSF    0A.3
07A5:  CALL   000
07A6:  BCF    0A.3
07A7:  MOVLW  20
07A8:  MOVWF  36
07A9:  CALL   184
07AA:  MOVLW  43
07AB:  MOVWF  36
07AC:  CALL   184
....................             lcd_gotoxy(1,2); 
07AD:  MOVLW  01
07AE:  MOVWF  37
07AF:  MOVLW  02
07B0:  MOVWF  38
07B1:  CALL   172
....................             printf(lcd_putc, "Nem: %2.1f %%", nem); 
07B2:  MOVLW  18
07B3:  BSF    03.6
07B4:  MOVWF  0D
07B5:  MOVLW  00
07B6:  MOVWF  0F
07B7:  BCF    03.0
07B8:  MOVLW  05
07B9:  BCF    03.6
07BA:  MOVWF  29
07BB:  CALL   6AC
07BC:  MOVLW  01
07BD:  MOVWF  04
07BE:  MOVF   28,W
07BF:  MOVWF  2C
07C0:  MOVF   27,W
07C1:  MOVWF  2B
07C2:  MOVF   26,W
07C3:  MOVWF  2A
07C4:  MOVF   25,W
07C5:  MOVWF  29
07C6:  MOVLW  01
07C7:  MOVWF  2D
07C8:  BSF    0A.3
07C9:  CALL   000
07CA:  BCF    0A.3
07CB:  MOVLW  20
07CC:  MOVWF  36
07CD:  CALL   184
07CE:  MOVLW  25
07CF:  MOVWF  36
07D0:  CALL   184
....................         } else { 
07D1:  GOTO   7D9
....................             lcd_putc("\fSensor Hatasi"); 
07D2:  MOVLW  1F
07D3:  BSF    03.6
07D4:  MOVWF  0D
07D5:  MOVLW  00
07D6:  MOVWF  0F
07D7:  BCF    03.6
07D8:  CALL   1B0
....................         } 
....................         delay_ms(2000); // 2 saniyede bir güncelle 
07D9:  MOVLW  08
07DA:  MOVWF  29
07DB:  MOVLW  FA
07DC:  MOVWF  37
07DD:  CALL   027
07DE:  DECFSZ 29,F
07DF:  GOTO   7DB
07E0:  GOTO   77F
....................     } 
.................... } 
07E1:  SLEEP

Configuration Fuses:
   Word  1: 3F7A   HS NOWDT NOPUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
